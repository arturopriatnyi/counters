// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package handler is a generated GoMock package.
package handler

import (
	context "context"
	counter "counters/pkg/counter"
	oauth2 "counters/pkg/oauth2"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIAManager is a mock of IAManager interface.
type MockIAManager struct {
	ctrl     *gomock.Controller
	recorder *MockIAManagerMockRecorder
}

// MockIAManagerMockRecorder is the mock recorder for MockIAManager.
type MockIAManagerMockRecorder struct {
	mock *MockIAManager
}

// NewMockIAManager creates a new mock instance.
func NewMockIAManager(ctrl *gomock.Controller) *MockIAManager {
	mock := &MockIAManager{ctrl: ctrl}
	mock.recorder = &MockIAManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAManager) EXPECT() *MockIAManagerMockRecorder {
	return m.recorder
}

// OAuth2URL mocks base method.
func (m *MockIAManager) OAuth2URL(provider oauth2.Provider) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OAuth2URL", provider)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OAuth2URL indicates an expected call of OAuth2URL.
func (mr *MockIAManagerMockRecorder) OAuth2URL(provider interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OAuth2URL", reflect.TypeOf((*MockIAManager)(nil).OAuth2URL), provider)
}

// SignInWithOAuth2 mocks base method.
func (m *MockIAManager) SignInWithOAuth2(ctx context.Context, provider oauth2.Provider, state, code string) (oauth2.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignInWithOAuth2", ctx, provider, state, code)
	ret0, _ := ret[0].(oauth2.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignInWithOAuth2 indicates an expected call of SignInWithOAuth2.
func (mr *MockIAManagerMockRecorder) SignInWithOAuth2(ctx, provider, state, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignInWithOAuth2", reflect.TypeOf((*MockIAManager)(nil).SignInWithOAuth2), ctx, provider, state, code)
}

// MockCounterManager is a mock of CounterManager interface.
type MockCounterManager struct {
	ctrl     *gomock.Controller
	recorder *MockCounterManagerMockRecorder
}

// MockCounterManagerMockRecorder is the mock recorder for MockCounterManager.
type MockCounterManagerMockRecorder struct {
	mock *MockCounterManager
}

// NewMockCounterManager creates a new mock instance.
func NewMockCounterManager(ctrl *gomock.Controller) *MockCounterManager {
	mock := &MockCounterManager{ctrl: ctrl}
	mock.recorder = &MockCounterManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCounterManager) EXPECT() *MockCounterManagerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockCounterManager) Add(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockCounterManagerMockRecorder) Add(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockCounterManager)(nil).Add), id)
}

// Delete mocks base method.
func (m *MockCounterManager) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCounterManagerMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCounterManager)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockCounterManager) Get(id string) (*counter.Counter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*counter.Counter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCounterManagerMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCounterManager)(nil).Get), id)
}

// Inc mocks base method.
func (m *MockCounterManager) Inc(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inc", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Inc indicates an expected call of Inc.
func (mr *MockCounterManagerMockRecorder) Inc(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inc", reflect.TypeOf((*MockCounterManager)(nil).Inc), id)
}
