// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package http is a generated GoMock package.
package http

import (
	counter "go-aws-ec2/pkg/counter"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCounterManager is a mock of CounterManager interface.
type MockCounterManager struct {
	ctrl     *gomock.Controller
	recorder *MockCounterManagerMockRecorder
}

// MockCounterManagerMockRecorder is the mock recorder for MockCounterManager.
type MockCounterManagerMockRecorder struct {
	mock *MockCounterManager
}

// NewMockCounterManager creates a new mock instance.
func NewMockCounterManager(ctrl *gomock.Controller) *MockCounterManager {
	mock := &MockCounterManager{ctrl: ctrl}
	mock.recorder = &MockCounterManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCounterManager) EXPECT() *MockCounterManagerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockCounterManager) Add(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockCounterManagerMockRecorder) Add(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockCounterManager)(nil).Add), id)
}

// Get mocks base method.
func (m *MockCounterManager) Get(id string) (counter.Counter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(counter.Counter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCounterManagerMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCounterManager)(nil).Get), id)
}
